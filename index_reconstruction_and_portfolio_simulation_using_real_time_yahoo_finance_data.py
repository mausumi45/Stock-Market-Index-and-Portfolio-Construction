# -*- coding: utf-8 -*-
"""Index_Reconstruction_and_Portfolio_Simulation_using_Real_Time_Yahoo_Finance_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/mausumi45/Stock-Market-Index-and-Portfolio-Construction/blob/main/Index_Reconstruction_and_Portfolio_Simulation_using_Real_Time_Yahoo_Finance_Data.ipynb

**Building and Analyzing Custom Market Indices**

Simulate the DJIA (price-weighted) and an S&P 500-style (market-cap weighted) index using the real historical data from Dow.xlsx.

**Objectives**

1.   Rebuild DJIA (Price-weighted Index) from scratch.
2.  Simulate an S&P 500-style market-cap weighted portfolio.
3. Calculate daily returns, cumulative returns, and volatility.
4. Visualize index movements, weight allocations, and volatility comparison.
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**1.   Rebuild DJIA (Price-weighted Index) from scratch.**"""

# Dow 30 tickers
tickers = [
    "AAPL", "MSFT", "JPM", "V", "PG", "KO", "DIS", "IBM", "NKE", "WMT",
    "BA", "HD", "INTC", "AXP", "MMM", "CAT", "CVX", "CSCO", "GS", "JNJ",
    "MCD", "MRK", "TRV", "UNH", "VZ", "WBA", "XOM", "DOW", "AMGN", "CRM"]

# Set date range
start = "2023-01-01"
end = "2025-05-31"

# Download historical data
print("Fetching stock data...")
data = yf.download(tickers, start=start, end=end, auto_adjust=False)['Adj Close']
data.dropna(axis=1, inplace=True)
print(data)

# --- DJIA Price-Weighted Index ---
djia_index = data.sum(axis=1) / len(data.columns)
djia_index.name = 'DJIA_PriceWeighted'

"""**2.  Simulate an S&P 500-style market-cap weighted portfolio.**

"""

# --- Market Cap Weighted Index ---
print("Fetching market caps...")
market_caps = {}
for t in data.columns:
    try:
        stock = yf.Ticker(t)
        info = stock.info
        market_caps[t] = info.get('marketCap', np.nan)
    except:
        market_caps[t] = np.nan

market_caps = pd.Series(market_caps)
valid_tickers = market_caps.dropna().index.tolist()

# Filter valid tickers
data = data[valid_tickers]
market_caps = market_caps[valid_tickers]
print(market_caps)

# Normalize weights
weights = market_caps / market_caps.sum()
print(weights)

"""**3. Calculate daily returns, cumulative returns, and volatility.**"""

# Daily returns
returns = data.pct_change().dropna()
print(returns)

# Market cap weighted returns
weighted_returns = returns.mul(weights, axis=1).sum(axis=1)
print(weighted_returns)

# Build market cap weighted index (base 100)
sp500_sim = (1 + weighted_returns).cumprod() * 100
sp500_sim.name = 'S&P500_MCapWeighted'
print(sp500_sim)

# Combine both indices
index_df = pd.concat([djia_index / djia_index.iloc[0] * 100, sp500_sim], axis=1)
print(index_df)

# --- Volatility Calculation ---
volatility = pd.DataFrame({
    'DJIA_Volatility': index_df['DJIA_PriceWeighted'].pct_change().std(),
    'S&P500_Volatility': index_df['S&P500_MCapWeighted'].pct_change().std()
}, index=['Volatility'])
print(volatility)

"""**4. Visualize index movements, weight allocations, and volatility comparison.**

**DJIA vs S&P 500-style index performance**
"""

plt.figure(figsize=(12,6))
plt.plot(index_df, linewidth=2)
plt.title("Simulated DJIA vs Market-Cap Weighted Index (S&P500 Style)")
plt.xlabel("Date")
plt.ylabel("Index Level (Base 100)")
plt.grid(True)
plt.legend(index_df.columns)
plt.tight_layout()
plt.show()

"""**Trend Observations**

1.   Both indices follow similar directional trends, indicating macroeconomic consistency.
2.   However, S&P500-style has steeper growth phases, especially in early and mid-2024.
3. The dip in early 2025 affects both indices, but the market-cap index recovers more sharply, showing resilience of large-cap stocks.

**S&P 500 stock weights by market cap**
"""

# Bar plot of stock weights
plt.figure(figsize=(10, 5))
sns.barplot(x=weights.index, y=weights.values)
plt.xticks(rotation=90)
plt.title("Market Capitalization Weights (S&P500 Style)")
plt.ylabel("Weight")
plt.tight_layout()
plt.show()

"""**Heavy Concentration in AAPL and MSFT**
Microsoft (MSFT) and Apple (AAPL) dominate the index:

1. MSFT: Over 25% weight

2. AAPL: Over 20% weight

Combined, these two tech giants make up nearly 50% of the portfolio, indicating extreme concentration risk if diversification is not applied.

**Mid-Tier Contributors**

JPMorgan (JPM), Visa (V), and ExxonMobil (XOM) also have noticeable weights (~5â€“6% range).

These represent other sectors like financials and energy, providing sectoral diversification.

**Minimal Impact Stocks**

Companies like DOW, WBA, DIS, and NKE have very small weights (<1%),
indicating:

Low market caps relative to the giants

Limited influence on index movement despite being DJIA constituents


"""

print("\nVolatility Comparison:")
print(volatility)